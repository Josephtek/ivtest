#
# Copyright (c) 1999 Guy Hutchison (ghutchis@pacbell.net)
#
#    This source code is free software; you can redistribute it
#    and/or modify it in source code form under the terms of the GNU
#    General Public License as published by the Free Software
#    Foundation; either version 2 of the License, or (at your option)
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
#
# Format of the file
# 
# testname	testtype	directory
#
# Note that no  extension is required for the testname, and that the 
# sregress.pl logic requires that the FIRST test in the list not be a
# CO class test.
#
# Testtype can be one of
#
# normal:	Normal results expected, i.e it should compile an execute 
#               to a PASSED
# CO:		Compile only - Examine the logfile for any errors - shouldn't 
#               be any.
# CE:		Compile with Errors - We EXPECT errors - we're checking 
#               illegal syntax
# 
# The third arguement is the directory, and forth optional is one of
# modulename - Defines the top level module
# gold=filename - Compare a gold file against the generated log file.
# diff=filename1:filename2 - Compare the two files for equality.
#
always3.1.10A	CO	ivltests	# always -> event ; infinite loop
always3.1.11A	normal	ivltests
always3.1.11B	normal	ivltests
always3.1.12A	normal	ivltests	# always fork join
always3.1.12B	normal	ivltests	# always fork: block_id join
always3.1.12C	normal	ivltests
always3.1.1A	CO	ivltests	# has an infinite loop.
always3.1.1B	CO	ivltests	# has an infinite loop
always3.1.1C	normal	ivltests
always3.1.1D	normal	ivltests
always3.1.1E	normal	ivltests
always3.1.1F	normal	ivltests
always3.1.1G	CO	ivltests
always3.1.1H	CO	ivltests
always3.1.1I	CO	ivltests
always3.1.1J	CO	ivltests
always3.1.1K	CO	ivltests
always3.1.2A	CO	ivltests
always3.1.2B	CO	ivltests
always3.1.2C	CO	ivltests
always3.1.2D	CO	ivltests
always3.1.2E	CO	ivltests
always3.1.2F	CO	ivltests
always3.1.2G	CO	ivltests
always3.1.2H	CO	ivltests
always3.1.2I	CO	ivltests
always3.1.3A	CO	ivltests
always3.1.3B	CO	ivltests
always3.1.3C	CO	ivltests
always3.1.3D	CO	ivltests
always3.1.3E	CO	ivltests
always3.1.3F	CO	ivltests
always3.1.3G	CO	ivltests
always3.1.3H	CO	ivltests
always3.1.3J	CO	ivltests
always3.1.4A	normal	ivltests
always3.1.4B	normal	ivltests
always3.1.4C	normal	ivltests
always3.1.4D	normal	ivltests
always3.1.4E	normal	ivltests
always3.1.4F	normal	ivltests
always3.1.4G	normal	ivltests
always3.1.4H	normal	ivltests
always3.1.4I	normal	ivltests
always3.1.5A	normal	ivltests
always3.1.5B	normal	ivltests
always3.1.5C	normal	ivltests
always3.1.5D	normal	ivltests
always3.1.5E	normal	ivltests
always3.1.5F	normal	ivltests
always3.1.6A	normal	ivltests
always3.1.6B	normal	ivltests
always3.1.6C	normal	ivltests
always3.1.7A	normal	ivltests
always3.1.7B	normal	ivltests
always3.1.7C	normal	ivltests
always3.1.7D	normal	ivltests
always3.1.8A	normal	ivltests
always3.1.9A	CO	ivltests	# always disable taskname
always3.1.9B	CO    	ivltests	# always disable blockid
always3.1.9C	normal	ivltests	# always #1 disable taskname
always3.1.9D	normal  ivltests	# always #1 disable blockid
assign3.2A	normal	ivltests
assign3.2B	normal	ivltests
assign3.2C	normal	ivltests
assign3.2D	normal	ivltests
assign3.2E	CE    	ivltests
case3.8A	normal	ivltests
case3.8B	normal	ivltests
case3.8C	normal	ivltests
casex3.9A	normal	ivltests
casex3.9B	normal	ivltests
casex3.9C	normal	ivltests
casex3.9D	normal	ivltests
casex3.9E	normal	ivltests
casez3.10A	normal	ivltests
casez3.10B	normal	ivltests
casez3.10C	normal	ivltests
casez3.10D	normal	ivltests
casez3.10E	normal	ivltests 		# Use ? and z in label
contrib8.1	normal	ivltests
contrib8.2	normal	ivltests test	# Add the 4th optional arguement -s test
contrib8.5	normal	ivltests # Add the 4th optional arguement -s test
deassign3.4A	normal	ivltests
defparam3.5	normal	ivltests		# defparam(single)
defparam    normal  ivltests main	# defparams with list
disable3.6A	normal	ivltests
disable3.6B	normal	ivltests
function3.11B	normal	ivltests
function3.11C	normal	ivltests
function3.11D	normal	ivltests
function3.11F	normal	ivltests
module3.12A	normal	ivltests main
module3.12B	normal	ivltests
ptest001	normal	ivltests
ptest002	normal	ivltests
ptest003	normal	ivltests
ptest004	normal	ivltests
ptest005	normal	ivltests
ptest006	normal	ivltests
ptest007	normal	ivltests
ptest008	normal	ivltests
ptest009	normal	ivltests
ptest010	normal	ivltests
ptest011	normal	ivltests
qmark	normal	ivltests
qmark1	normal	ivltests
qmark3	normal	ivltests
qmark5	normal	ivltests
sdw_always1	normal	ivltests
sdw_always2	normal	ivltests
sdw_always3	normal	ivltests
sdw_array	normal	ivltests
sdw_assign	normal	ivltests
sdw_dsbl	normal	ivltests
sdw_force	normal	ivltests
sdw_function1	normal	ivltests
sdw_function2	normal	ivltests
sdw_function3	normal	ivltests
sdw_instmod1	normal	ivltests
sdw_instmod2	normal	ivltests
sdw_int		normal	ivltests
sdw_lvalconcat	normal	ivltests
sdw_lvalconcat2	normal	ivltests
sdw_param1	normal	ivltests
sdw_param2	normal	ivltests
sdw_release	normal	ivltests
sdw_stmt002	normal	ivltests
sdw_task1	normal	ivltests
sdw_task2	normal	ivltests
task3.14A	normal	ivltests
task3.14B	normal	ivltests
task3.14C	normal	ivltests
task3.14D	normal	ivltests
task3.14E	normal	ivltests
task3.14F	normal	ivltests
z1	normal	ivltests foo
z2	normal	ivltests foo
contrib8.3	CE	ivltests
contrib8.4  normal  ivltests
integer1lt  normal ivltests
integer2le  normal ivltests
integer3gt  normal ivltests
integer4ge  normal ivltests
land2 normal ivltests
land3 normal ivltests
talu normal ivltests
time2 normal ivltests  # Tests posedge vector uses vector[0]
sdw_lvalconcat normal ivltests
sdw_lvalconcat2 normal ivltests
time1 normal ivltests
vardly normal ivltests
lh_varindx normal ivltests
always3.1.6D normal ivltests
time3 normal ivltests
time4 normal ivltests
time5 normal ivltests
time6	normal	ivltests
time7	normal	ivltests   #	gold=time7.gold
time8	normal	ivltests
timescale1	normal ivltests
udp_bufg normal ivltests
udp_bufg2 normal ivltests
udp_jkff normal	ivltests
udp_x	normal	ivltests
wireadd1 normal ivltests
wiremod1 normal ivltests
wiresl normal ivltests
wiresl2 normal ivltests gold=wiresl2.gold
wiresr normal ivltests
wiresub1 normal ivltests
wirexor1 normal ivltests
wirele normal ivltests
wirege normal ivltests
wireeq normal ivltests
ga_and normal ivltests
ga_or normal ivltests
ga_xor normal ivltests
ga_xnor normal ivltests
ga_nand normal ivltests
ga_nor normal ivltests
constmult normal ivltests
constadd normal ivltests
constadd2 normal ivltests
qmark6  normal ivltests
muxtest normal ivltests	# Validates that X sel and inputs same, output not X
fifo	normal contrib
event3.15	normal ivltests # Validate event lists, and -> operator.
unary_and	normal ivltests # Unary And &(vect)
unary_minus	normal ivltests # Unary minus -(vect)
unary_minus1	normal ivltests # From 272 directly.
unary_minus2	normal ivltests
unary_nand	normal ivltests # Unary nand ~&(vect)
unary_not	normal ivltests # Unary not ~
unary_or 	normal ivltests # Unary or  |(vect)
unary_nor	normal ivltests # Unary nor ~|(vect)
unary_xor 	normal ivltests # Unary or  ^(vect)
unary_xnor1	normal ivltests # Unary xnor ~^(vect)
unary_xnor2	normal ivltests # Unary xnor ^~(vect)
rptconcat	normal ivltests # Repeat concatenation operation.
rptconcat2	normal ivltests # Repeat concatenation operation.
gencrc		normal contrib  # 32/16 bit crc 
onehot		normal contrib	# one hot design
inout		normal ivltests # modname(a,a); inout a;
modparam	normal ivltests top # Overide parameter via passed down value
modulus		normal ivltests # wire % and reg % operators 
modulus2	normal ivltests # reg % operators 
mult1		normal ivltests # wire * and reg * operators 
xnor_test	normal ivltests # ~^ in an IF()
pullupdown	normal ivltests # Contributed test
pullupdown2	normal ivltests # Contributed test
pullupdown3	normal ivltests # Contributed test
drive_strength	normal ivltests # Contributed test
drive_strength1	normal ivltests #
drive_strength2 normal ivltests diff=log/drive_strength2.log:gold/drive_strength2.gold 
drive_strength3	normal ivltests #
sdw_function4	normal ivltests # function with if from George Gallant bug rpt
sdw_function5	normal ivltests # function with if from George Gallant bug rpt
readmemh1	normal ivltests # basic $readmemh - uses readmemh1.dat
readmemh1a	normal ivltests # basic $readmemh with @addr - uses readmemh1a.dat
readmemh2	normal ivltests # $readmemh w/ short data file - readmemh2.dat
readmemh3	normal ivltests # $readmemh 0-3 with long dfile - readmemh1.dat
readmemh4	normal ivltests # $readmemh - comments in data file 
readmemb1	normal ivltests # basic $readmemb - uses readmemh1.dat
readmemb2	normal ivltests # $readmemb w/ short data file - readmemh2.dat
readmemb3	normal ivltests # $readmemb 0-3 with long dfile - readmemh1.dat
dff1		normal ivltests # Contrib by S Willaims
con_tri		normal ivltests # Contrib by S Willaims
tri0		normal	ivltests
tri0b		normal	ivltests
tri1		normal	ivltests
idiv1		normal ivltests # Contrib by S Willaims
fork3.19A	normal ivltests # 
fork3.19B   normal ivltests # 
mult16		normal contrib mul16 # Contributed by Tom Coonan - has $random
event_list	normal ivltests # Contrib by S Williams
event_list2	normal ivltests # Contrib by S Williams
event_list3	normal ivltests diff=log/event_list3.log:gold/event_list3.gold
posedge		normal ivltests # Contrib by S Williams
nblkorder	normal ivltests # Validates Non-blocking order determinism
nblkpush	normal ivltests # test if non-blocking assignments propagate
task_inpad	normal ivltests # Validates input of task should pad w/ 0
task_omemw3	CO		 ivltests # Pass bit selected from vector to task
cond_band	normal ivltests # Bitwise and in if condition
cond_wide	normal ivltests # condition is a wide value
bufif		normal ivltests # Validate bufif0, bufif1
pca1		normal ivltests # Procedural Continous Assignement in a mux 
wildsense	normal ivltests # Wildcard sensitivity list.
idiv2		normal ivltests # Int div within an expression
idiv3		normal ivltests diff=log/idiv3.log:gold/idiv3.gold
assign_mem1	normal ivltests #
assign_mem2	normal ivltests # Const prop/dead signal elimination
meminit		normal	ivltests
meminit2	normal	ivltests
mem1		normal	ivltests	gold=mem1.gold
task_noop	normal ivltests # Task with no contents.
task_noop2	CO	ivltests # Task *really* with no contents.
task_bypath	normal ivltests # task enabled by complete path name.
task_iotypes	normal ivltests # task ports with types.
scope1   	normal ivltests # scope of var into a task
scope2   	normal ivltests # scope of var stops at module boundaries
scope2b   	CE ivltests # broken version of scope2
task-scope	normal ivltests
assign_nb1  normal ivltests # Assign a constant to a single bit array (pmonta)
assign_nb2  normal ivltests # Assign a constant to a single bit array (pmonta)
assign_delay	normal ivltests # continuous assign with a delay
delay		normal ivltests diff=log/delay.log:gold/delay.gold
delay_assign_nb	normal ivltests
ldelay1	normal ivltests
ldelay2	normal ivltests
ldelay3	normal ivltests
ldelay4	normal ivltests
ldelay5	normal ivltests
wireland	normal ivltests # assign a && (b ? 0 : 1) (pmonta)
param_concat normal ivltests #  param has concat value (pmonta)
param_select	normal	ivltests # bit and part select of parameters.
param_times	normal ivltests #  param has multiplication.
case3.8D	 normal ivltests #  test case for x and z exact match in labels.  
function_exp normal ivltests # Cntrib by steve williams
function1	normal	ivltests diff=log/function1.log:gold/function1.gold
function2	normal	ivltests
function3	normal	ivltests
function4	normal	ivltests
ifdef1		 normal ivltests #  ifdef with no define
ifdef2		 normal ivltests #  ifdef with define
ifdef3		 normal ivltests #  compound ifdef with 1 define
ifdef4		 normal ivltests #  compound ifdef with 2 defines
else1		 normal ivltests #  ifdef with else
else2		 normal ivltests #  compound ifdef with else
else3		 normal ivltests #  compound ifdef compound else
include1	normal ivltests #  include file 1 level deep
include2	normal ivltests #  include file 2 levels deep
include3	normal ivltests #  include file 3 levels deep
define1		normal ivltests #  Use defined value for reg def and reg assign
fdisplay1	normal	ivltests  gold=fdisplay1.gold	# 
fdisplay2	normal  ivltests  diff=work/fdisplay2.out:gold/fdisplay2.out #
fdisplay3	normal	ivltests  gold=fdisplay3.gold
fopen1		normal  ivltests # Test basic fopen operation	
fopen2		normal  ivltests # Test basic fopen operation	
div16		normal	contrib test_div16 # Uses $random and divide operator (Tom Coonan)
addsr		normal	ivltests # Finds problems with >> using different sizes
tern1		normal	ivltests # Finds problems with ?: using different sizes
tern2		CO	ivltests # make sure ?: is recognixed by -tnull
readmemh5	CE		ivltests # Should be error for readmemh(romimg,rom[0:7])
port-test2	normal  ivltests # Port declaration syntax checks
port-test3	CE  ivltests # Port declaration syntax checks
param_string normal ivltests # parameter storing a string.
inertdly 	normal ivltests 	# Test for inertial delay
galan       normal ivltests 	# Ternary test with varying size lhs vs rhs 
pic     normal  contrib pictest diff=log/pic.log:gold/pic.gold
initmod		normal	ivltests diff=log/initmod.log:gold/initmod.gold
initmod2      normal  ivltests diff=log/initmod2.log:gold/initmod2.gold
bnot		normal	ivltests	# test triggered an overzealous assert in vvm
stask_parm1		normal	ivltests	# 
stask_parm2	normal	ivltests	gold=stask_parm2.gold
task_mem 		normal	ivltests	# 
task_omemw2     normal	ivltests	# 
unary_lnot1      normal	ivltests	# 
unary_lnot2      normal	ivltests	# 
unary_lnot3      normal	ivltests	# 
lh_varindx2      normal	ivltests	# 
lh_varindx4      normal	ivltests	# 
lh_varindx5      normal	ivltests	# 
lh_catadd      normal	ivltests	# 
shift_pad	normal	ivltests
format     normal  ivltests diff=log/format.log:gold/format.gold
disp_dec   normal  ivltests diff=log/disp_dec.log:gold/disp_dec.gold
disp_dec2  normal  ivltests diff=log/disp_dec2.log:gold/disp_dec2.gold
disp_part   	normal  ivltests diff=log/disp_part.log:gold/disp_part.gold
shellho1	normal	ivltests top diff=log/shellho1.log:gold/shellho1.gold
test_width	normal  ivltests diff=log/test_width.log:gold/test_width.gold
test_disphob	normal  ivltests diff=log/test_disphob.log:gold/test_disphob.gold
test_dispwided	normal  ivltests diff=log/test_dispwided.log:gold/test_dispwided.gold
test_extended	normal  ivltests diff=log/test_extended.log:gold/test_extended.gold
schedule	normal	ivltests
test_bufif0	normal	ivltests
test_bufif1	normal	ivltests
test_mos_strength_reduction	normal	ivltests
test_nmos	normal	ivltests
test_notif0	normal	ivltests
test_notif1	normal	ivltests
test_pmos	normal	ivltests
test_rnmos	normal	ivltests
test_rpmos	normal	ivltests
cprop		normal	ivltests
supply1		normal	ivltests
supply2		normal	ivltests
for3.16A    normal  ivltests
force3.17A  normal  ivltests
force3.17B  normal  ivltests
force3.17C  normal  ivltests
wait1        normal  ivltests
wait2        normal  ivltests
string1		normal	ivltests
string2		normal	ivltests
string3		normal	ivltests
ga_mod		normal  ivltests main
ga_mod1		normal  ivltests main
signed1		normal	ivltests
param_expr  normal  ivltests # & in param declar
param_and   normal  ivltests # bitwise &
param_and2  normal  ivltests # logical && in param declar
param_band  normal  ivltests # Bitwise and in param declar
param_bor  normal  ivltests  # Bitwise OR in param declar
param_eq3  normal  ivltests  # Bit equiv in param declar
param_binv normal  ivltests  # Bit vector inv in param declar
param_add  normal  ivltests  # Addition in param declar
param_mod  normal  ivltests  # Modulus in param declar
param_tern normal  ivltests
param_test1 normal ivltests diff=log/param_test1.log:gold/param_test1.gold
param_test2 normal ivltests diff=log/param_test2.log:gold/param_test2.gold
param_test3 CO	ivltests # PR#293
integer5  normal  ivltests  # 
signed2  normal  ivltests  # 
signed3  normal  ivltests  # 
signed4  normal  ivltests diff=log/signed4.log:gold/signed4.gold
signed5  normal  ivltests
repeat1  normal  ivltests
repeat2  normal  ivltests
decl_assign1	normal	ivltests
vector   normal  ivltests diff=log/vector.log:gold/vector.gold
mcl1	 normal  ivltests diff=log/mcl1.log:gold/mcl1.gold
mcl2	 normal  ivltests diff=log/mcl2.log:gold/mcl2.gold
comp1000 normal ivltests diff=log/comp1000.log:gold/comp1000.gold
comp1001 normal ivltests
specify1 CO	ivltests
deposit_wire	normal	ivltests
specify_01 normal ivltests test # Yet another versio of specify
deposit normal ivltests
assign_neq normal ivltests # continuous assign with !=
assign_deq normal ivltests # continuous assign with ==
assign_ge normal ivltests # continuous assign with >=
assign_le normal ivltests # continuous assign with <=
mangle normal ivltests    # 
mangle_1 normal ivltests  # 
rop normal ivltests       # 
task_scope normal ivltests # 
hello1	normal	ivltests
hierspace normal ivltests # whitespace.around .dots. in. hierachical .names
dotinid normal ivltests   # escaped names with . dots
eeq normal ivltests       # === and !== in structural context
dumpvars normal ivltests # PR#174: dumpvars non-hiearchical arguments
dangling_port normal ivltests # PR#209: dangling port optimization (VVP) 
sysargs normal ivltests # VVP postponed $syscall argument lookup 
many_drivers normal ivltests # net with many drivers
task_port_size normal ivltests # truncate task port connections
p_monta normal ivltests 
memidx normal ivltests # PR 221
memidxrng normal ivltests # PR 271 memory address range checks
mem2port normal ivltests # memory ports with constant address
vcd-dup normal ivltests diff=vcd-dup.vcd:gold/vcd-dup.vcd.gold:40
resolv1 normal ivltests # PR#300
pr307 normal ivltests # wide adds
pr307a normal ivltests # wide adds
memport_bs normal ivltests # PR#303
pr224 normal ivltests  # reg [3:0] ack; ... @(posedge ack)
pr224a normal ivltests # reg [3:0] ack; ... @(posedge ack[p])
pr298  normal ivltests diff=log/pr298.log:gold/pr298.gold
writememh1 normal ivltests # pr#334
writememh2 normal ivltests # pr#400
writememb1 normal ivltests # pr#400
writememb2 normal ivltests # pr#400
varlsfht1 normal ivltests # variable << in always
varlsfht2 normal ivltests # variable << in function
varlsfht normal ivltests  # variable << in wire
varrshft1 normal ivltests # variable >> in always
varrshft2 normal ivltests # variable >> in function
varrshft normal ivltests  # variable >> in wire
select	normal	ivltests # structural word select
select2	normal	ivltests # structural bit select
select3 normal	ivltests diff=log/select3.log:gold/select3.gold
monitor	normal	ivltests diff=log/monitor.log:gold/monitor.gold
fork1   normal  ivltests # Validate 3 way fork with simple assignments.
function5 CO ivltests # PR 184 
blankport normal ivltests main # PR 204 Stephan Boettcher - 
dcomp1	normal	ivltests diff=log/dcomp1.log:gold/dcomp1.gold
sp2     normal  ivltests diff=sp2.inv:gold/sp2.inv
const   normal  ivltests # PR 122 - Steve Tell - const without length spec.
const2	normal	ivltests # Some cases that the DCM module trips.
memassign normal ivltests # PR 126 - daavid Leask - assign bus part fm memory item
string4 normal ivltests diff=log/string4.log:gold/string4.gold
string5 normal ivltests diff=log/string5.log:gold/string5.gold
string7 normal ivltests diff=log/string7.log:gold/string7.gold
string8 normal ivltests diff=log/string8.log:gold/string8.gold
string9 normal ivltests diff=log/string9.log:gold/string9.gold
string10 normal ivltests diff=log/string10.log:gold/string10.gold
lh_memcat normal ivltests # Left hand arrays in concat (PR 77)
npmos	normal	ivltests
rnpmos	normal	ivltests
npmos2	normal	ivltests
rnpmos2	normal	ivltests
pr142   normal  ivltests # Test for PR142
multiply_large normal ivltests # Takes care of PR222
pr304	normal	ivltests # test for PR304
mhead_task normal ivltests # Verify hierarchical task name in another mod.
bitsel	normal	ivltests diff=log/bitsel.log:gold/bitsel.gold
pr312	normal	ivltests
pr355	normal	ivltests
ram16x1 normal ivltests # Sitting here for a long time?
sched1  normal ivltests # 
sched2  normal ivltests # 
pr273   normal ivltests # Non-constant bit select in ordered list.
escape1 normal ivltests # \$modulename in defparam and if()
escape2a CO	ivltests
escape2b CO	ivltests
escape2c CO	ivltests
pr338   CO ivltests # pr 338 - constant zz see also constadd2.v
shift1	normal	ivltests diff=log/shift1.log:gold/shift1.gold
pr243	normal	ivltests diff=log/pr243.log:gold/pr243.gold
dummy7	normal	ivltests diff=log/dummy7.log:gold/dummy7.gold
time6b  normal  ivltests # Rewrote time6 to pass with XL
disblock normal ivltests # PR280
comment1	normal	ivltests # PR410/411
pr136    normal  ivltests # PR136 param foo_size 8 * 4
port-test4a	CE	ivltests # Port declaration input duplication checks (PR394)
port-test4b	CE	ivltests # Port declaration output duplication checks (PR394)
port-test5	normal	ivltests # demonstrates 2001 module port syntax
port-test6	normal	ivltests # demonstrates 2001 module port syntax
pr445	normal	ivltests
big_int	normal	ivltests # PR#405
concat1	normal	ivltests # PR#327,372
concat2	normal	ivltests # PR#282
extend	normal	ivltests
